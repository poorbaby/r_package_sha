{
    "collab_server" : "",
    "contents" : "## Lecture 6\n\n###################\n## a quick aside ##\n###################\n## don't use View()\n## don't print the entire data set\n## when examining a data.frame object\niris\n## any of the following are better\nstr(iris)\nhead(iris)\ntail(iris)\n\n###################\n\n## tidyverse\nlibrary(tidyverse)\n\n## data from gapminder\nlibrary(gapminder)\n\nstr(gapminder)\nclass(gapminder)\n\n## what's a tbl_df? A tibble?\n## tibble's have a nice print method\n## unlike regular data.frame objects\ngapminder\n\n## it's still a data.frame\nhead(gapminder)\ntail(gapminder)\nnames(gapminder)\nncol(gapminder)\nnrow(gapminder)\ntable(gapminder$continent)\nbarplot(table(gapminder$continent))\n\n## ggplot2 example\np <- ggplot(filter(gapminder, continent != \"Oceania\"),\n            aes(x = gdpPercap, y = lifeExp)) # just initializes\np <- p + scale_x_log10() # log the x axis the right way\np + geom_point() # scatterplot\np + geom_point(aes(color = continent)) # map continent to color\np + geom_point(alpha = (1/3), size = 3) + geom_smooth(lwd = 3, se = FALSE)\np + geom_point(alpha = (1/3), size = 3) + facet_wrap(~ continent) +\n  geom_smooth(lwd = 1.5, se = FALSE)\n\n## dplyr package\n## replaces base R functions such as:\n## subset(),  apply(), lapply(), sapply()\n## aggregate(), split(), do.call(), with()\n## also many for loops\n\n## filter() to subset data by row\n## takes logical expressions and returns\n## the rows for which all are TRUE\nfilter(gapminder, lifeExp < 29)\nfilter(gapminder, country == \"Rwanda\", year > 1979)\nfilter(gapminder, country %in% c(\"Rwanda\", \"Afghanistan\"))\n\n## compare to base R\ngapminder[gapminder$lifeExp < 29, ]\nsubset(gapminder, country == \"Rwanda\")\n\n## pipe operator: %>%\n## avoid nesting functions\n## The RStudio keyboard shortcut:\n## Ctrl + Shift + M (Windows)\n## Cmd + Shift + M (Mac).\nhead(gapminder)\ngapminder %>% head()\n\n## select() to subset the data on variables or columns\nselect(gapminder, year, lifeExp)\ngapminder %>%\n  select(year, lifeExp) %>%\n  head(4)\n\n## more complicated example\ngapminder %>%\n  filter(country == \"Cambodia\") %>%\n  select(year, lifeExp)\n\n## in base R\ngapminder[gapminder$country == \"Cambodia\", c(\"year\", \"lifeExp\")]\n\n## make a copy of gapminder\nmy_gap <- gapminder\n\n## let output print to screen, but do not store\nmy_gap %>% filter(country == \"Canada\")\n\n## store the output as an R object\nmy_precious <- my_gap %>% filter(country == \"Canada\")\n\n## mutate() to add new variables\n## defines and inserts new variables into a tibble\n\n## Recover each countryâ€™s GDP by combining population\n## and GDP per capita\nmy_gap %>%\n  mutate(gdp = pop * gdpPercap)\n\n## arrange() to row-order data in a principled way\n## areorders the rows in a data frame\n\n## data ordered by year then country\nmy_gap %>%\n  arrange(year, country)\n\n## just data from 2007\n## sorted on life expectancy\nmy_gap %>%\n  filter(year == 2007) %>%\n  arrange(lifeExp)\n\n## now in descending order\nmy_gap %>%\n  filter(year == 2007) %>%\n  arrange(desc(lifeExp))\n\n## rename() to rename variables\n## from camelCase to snake_case\nmy_gap %>%\n  rename(life_exp = lifeExp,\n         gdp_percap = gdpPercap,\n         gdp_percap_rel = gdpPercapRel)\n\n## select() can rename and reposition variables\n## select() can rename the variables you request to keep.\n## select() can be used with everything() to hoist\n## a variable up to the front of the tibble.\nmy_gap %>%\n  filter(country == \"Burundi\", year > 1996) %>%\n  select(yr = year, lifeExp, gdpPercap) %>%\n  select(gdpPercap, everything())\n\n## summarize() takes a dataset with n observations\n## computes requested summaries, and\n## returns a dataset with 1 observation\nmy_gap %>%\n  summarize(n = n())\n\n## group_by() adds extra structure to your dataset\n## grouping information lays the groundwork for\n## computations within the groups.\ntab_tidy <- my_gap %>%\n  group_by(continent) %>%\n  summarize(n = n())\n\n## alternatively\nmy_gap %>%\n  group_by(continent) %>%\n  tally()\n\n## or another way\nmy_gap %>%\n  count(continent)\n\n## in base R\ntab_base <- table(gapminder$continent)\n\n## compare classes\nclass(tab_base)\nclass(tab_tidy)\n\n## multiple summaries\n## add the number of unique countries for each continent\n## n_distinct() function to count the number of distinct\n## countries within each continent.\nmy_gap %>%\n  group_by(continent) %>%\n  summarize(n = n(),\n            n_countries = n_distinct(country))\n\n## other summaries\nmy_gap %>%\n  group_by(continent) %>%\n  summarize(avg_lifeExp = mean(lifeExp))\n\n## summarize_each() applies the same function(s) to multiple variables\n## compute average and median life expectancy and GDP per capita\n## by continent by year and only for 1952 and 2007\nmy_gap %>%\n  filter(year %in% c(1952, 2007)) %>%\n  group_by(continent, year) %>%\n  summarise_each(funs(mean, median), lifeExp, gdpPercap)\n\n## focus just on Asia and\n## compute min and max life expectancies by year\nmy_gap %>%\n  filter(continent == \"Asia\") %>%\n  group_by(year) %>%\n  summarize(min_lifeExp = min(lifeExp), max_lifeExp = max(lifeExp))\n\n## Grouped mutate\n## computing within each group\n## make a new variable that is the years of life expectancy\n## gained (lost) relative to 1952, for each individual country.\n## We group by country and use mutate() to make a new variable.\n## The first() function extracts the first value from a vector.\n## Notice that first() is operating on the vector of\n## life expectancies within each country group.\nmy_gap %>%\n  group_by(country) %>%\n  select(country, year, lifeExp) %>%\n  mutate(lifeExp_gain = lifeExp - first(lifeExp)) %>%\n  filter(year < 1963)\n\n## Window functions\n## take n inputs and give back n outputs\n## the output depends on all the values\n## rank() is a window function but log() is not\n\n## revisit the worst and best life expectancies in Asia over time,\n## but retaining info about which country contributes these extreme values.\nmy_gap %>%\n  filter(continent == \"Asia\") %>%\n  select(year, country, lifeExp) %>%\n  group_by(year) %>%\n  filter(min_rank(desc(lifeExp)) < 2 | min_rank(lifeExp) < 2) %>%\n  arrange(year) %>%\n  print(n = Inf)\n\n## just the min OR the max\n## using top_n()\nmy_gap %>%\n  filter(continent == \"Asia\") %>%\n  select(year, country, lifeExp) %>%\n  arrange(year) %>%\n  group_by(year) %>%\n  #top_n(1, wt = lifeExp)        ## gets the min\n  top_n(1, wt = desc(lifeExp)) ## gets the max\n\n## which country experienced the sharpest 5-year drop in life expectancy?\n## this excerpt of the Gapminder data only has data every five years\n## look at life expectancy changes between adjacent timepoints.\nmy_gap %>%\n  select(country, year, continent, lifeExp) %>%\n  group_by(continent, country) %>%\n  ## within country, take (lifeExp in year i) - (lifeExp in year i - 1)\n  ## positive means lifeExp went up, negative means it went down\n  mutate(le_delta = lifeExp - lag(lifeExp)) %>%\n  ## within country, retain the worst lifeExp change = smallest or most negative\n  summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%\n  ## within continent, retain the row with the lowest worst_le_delta\n  top_n(-1, wt = worst_le_delta) %>%\n  arrange(worst_le_delta)\n\n########\n\n## pipe filtered data into a command\n\n## compare gdpPercap in Australia vs New Zealand\noceania_ttest <- gapminder %>%\n  filter(country %in% c(\"Australia\", \"New Zealand\")) %>%\n  t.test(gdpPercap ~ country, data = .)\n\n",
    "created" : 1507671352014.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1101918277",
    "id" : "9FBC15C9",
    "lastKnownWriteTime" : 1507678080,
    "last_content_update" : 1507678080330,
    "path" : "~/Dropbox/UR/BST430/Lecture06/lecture6.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}