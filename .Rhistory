googlekey <- gs_url("https://docs.google.com/spreadsheets/d/1KdOw0FIxY2Kt8UgY16F3UMQSC7KJaBgtmewNZUGuLY8/edit#gid=0",lookup = FALSE,visibility = "public")
mydata <- gs_read(googlekey, skip = 3)
View(mydata)
View(mydata)
library(tidyverse)
?kable
n <- mydata %>%
summarize(n = n())
n
n <- mydata %>%
summarize(n = n())
print(n)
n <- mydata %>%
summarize(n = n())
paste0("Total number of observation of the dataset " + n)
n <- mydata %>%
summarize(n = n())
n
n <- mydata %>%
summarize(n = n())
knitr::kable(n, format = "html", align = 'l', caption = "Total number of observations in the dataset")
n <- mydata %>%
summarize(n = n())
knitr::kable(n, format = "markdown", align = 'l')
mydata %>%
filter(SleepDuration > 8 & Tempreture > 20) %>%
summarize(n = n())
knitr::kable(, format = "markdown", align = 'l')
count2 <- mydata %>%
filter(SleepDuration > 8 & Tempreture > 20) %>%
summarize(n = n())
knitr::kable(, format = "markdown", align = 'l')
count2 <- mydata %>%
filter(SleepDuration > 8 & Tempreture > 20) %>%
summarize(n = n())
knitr::kable(count2, format = "markdown", align = 'l')
View(mydata)
knitr::kable(head(mydata), format = "markdown", align = 'c')
avg_sleep_weather <- mydata %>%
group_by(Weather) %>%
summarise(avg_sleep = mean(SleepDuration)) %>%
mutate(avg_sleep = round(avg_sleep, 2)) %>%
arrange(desc(avg_sleep))
knitr::kable(avg_sleep_weather, format = "markdwon", align = 'l')
avg_sleep_weather <- mydata %>%
group_by(Weather) %>%
summarise(avg_sleep = mean(SleepDuration)) %>%
mutate(avg_sleep = round(avg_sleep, 2)) %>%
arrange(desc(avg_sleep))
knitr::kable(avg_sleep_weather, format = "markdown", align = 'l')
rank <- mydata %>%
group_by(DayofWeek) %>%
summarise(avg_activity = mean(Activity)) %>%
mutate(avg_activity = round(avg_activity, 2)) %>%
arrange(desc(avg_activity))
knitr::kable(rank, format = "markdown", align = "l")
devtools::load_all(".")
library(sha)
gs_user()
help(state.x77)
state.x77 #Investigating the state.x77 dataset.
states = as.data.frame(state.x77) #Forcing the state.x77 dataset to be a dataframe.
colnames(states)[4] = "Life.Exp"
colnames(states)[6] = "HS.Grad"
states[,9] = (states$Population*1000)/states$Area
colnames(states)[9] = "Density"
summary(states)
sapply(states, sd)
cor(states)
plot(states)
plot(mydata)
plot(mydata[,34678])
plot(mydata[,c(3,4,6,7,8)])
View(mydata)
plot(states)
?sha
basic_stats(sleepdurationDay, "Weight", "DayType", max)
basic_stats(sleepdurationDay, "Weight", "DayType", mean)
View(mydata)
?basic_stats
basic_stats(sleepdurationDay, "Weight", "DayType", max)
?mean
x <- c(0:10, 50)
xm <- mean(x)
c(xm, mean(x, trim = 0.10))
sleepduration
plot(states)
plot_box(sleepdurationDay, x = "DayType", y= "SleepDuration")
plot(mydata[,c(3, 4, 6, 7, 8)])
library("googlesheets")
googlekey <- gs_url("https://docs.google.com/spreadsheets/d/1KdOw0FIxY2Kt8UgY16F3UMQSC7KJaBgtmewNZUGuLY8/edit#gid=0",lookup = FALSE,visibility = "public")
mydata <- gs_read(googlekey, skip = 3)
plot(mydata[,c(3, 4, 6, 7, 8)])
sessionInfo()
knitr::kable(head(mydata), format = "markdown", align = 'c')
library(sha)
c <- classifyday(df = mydata, x = "DayofWeek")
mydata$DayType <- as.factor(c)
knitr::kable(head(mydata), format = "markdown", align = 'c')
plot_scatter(mydata,"Weight","SleepDuration", "DayType")
setwd("~/Desktop/week5 Homeworkfolder/MultipleLinearRegressionHomework/")
NYC.R <- read.table(file = "~/Desktop/week5 Homeworkfolder/MultipleLinearRegressionHomework/[04] NYC Restaurants.txt")
pairs(NYC.R[,2:5], main = "Scatterplot of Italian restaurants in the New York City area",
pch = 21, bg = c( "lightblue", "pink2")[unclass(NYC.R$Location)])
scatterplotMatrix(~ Price + Food + Decor + Service| Location, data=NYC.R,
main="ScatterPlot Matrix of NYC Resturant Data ")
library(car)
scatterplotMatrix(~ Price + Food + Decor + Service| Location, data=NYC.R,
main="ScatterPlot Matrix of NYC Resturant Data ")
f<-as.formula(paste("Price ~", paste(n[!n %in% "y"],collapse = "+")))
head(mydata)
library("googlesheets")
googlekey <- gs_url("https://docs.google.com/spreadsheets/d/1KdOw0FIxY2Kt8UgY16F3UMQSC7KJaBgtmewNZUGuLY8/edit#gid=0",lookup = FALSE,visibility = "public")
mydata <- gs_read(googlekey, skip = 3)
knitr::kable(head(mydata), format = "markdown", align = 'c')
library(sha)
c <- classifyday(df = mydata, x = "DayofWeek")
mydata$DayType <- as.factor(c)
knitr::kable(head(mydata), format = "markdown", align = 'c')
plot_scatter(mydata,"Weight","SleepDuration", "DayType")
plot_scatter(mydata,"Activity","SleepDuration", "DayType")
plot_box(mydata, x = "DayType", y= "SleepDuration")
library(tidyverse)
n <- mydata %>%
summarize(n = n())
knitr::kable(n, format = "markdown", align = 'l')
count2 <- mydata %>%
filter(SleepDuration > 8 & Tempreture > 20) %>%
summarize(n = n())
knitr::kable(count2, format = "markdown", align = 'l')
rank <- mydata %>%
group_by(DayofWeek) %>%
summarise(avg_activity = mean(Activity)) %>%
mutate(avg_activity = round(avg_activity, 2)) %>%
arrange(desc(avg_activity))
knitr::kable(rank, format = "markdown", align = "l")
sleep_by_day <- mydata %>%
group_by(DayType) %>%
summarise(avg_sleep = mean (SleepDuration)) %>%
mutate(avg_sleep = round (avg_sleep, 2)) %>%
arrange(desc(avg_sleep))
knitr::kable(sleep_by_day, format = "markdown", align = 'l')
avg_sleep_weather <- mydata %>%
group_by(Weather) %>%
summarise(avg_sleep = mean(SleepDuration)) %>%
mutate(avg_sleep = round(avg_sleep, 2)) %>%
arrange(desc(avg_sleep))
knitr::kable(avg_sleep_weather, format = "markdown", align = 'l')
summary(aov(SleepDuration ~ DayType, data = mydata ))
summary(aov(SleepDuration ~ Weather, data = mydata))
knitr::kable(paircorr(mydata), format = "markdown", align = "l", padding = 2 )
ans <- mydata %>%
filter(Weather == "Sunny") %>%
group_by(DayType) %>%
summarise(r = cor(SleepDuration, Tempreture)) %>%
mutate(r = round(r, 2)) %>%
arrange(desc(r))
knitr::kable(ans, format = "markdown", align = "l")
slm_s(mydata, x = "Tempreture", y="Heart Rate")
slm_s(mydata, x = "Tempreture", y="HeartRate")
modelplot(mydata, x = "Tempreture", y="HeartRate")
slm_s(mydata, x = "Activity", y="SleepDuration")
modelplot(mydata, x = "Activity", y="SleepDuration")
library(car)
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
main="scatterplot matrix of nyc restaurant data")
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
main="scatterplot matrix of nyc restaurant data")
library(car)
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
main="Scatterplot Matrix")
library(car)
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
main="Scatterplot Matrix")
plot(mydata[,c(3,4,6,7,8)])
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
main="Scatterplot Matrix")
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
main="Scatterplot Matrix")
pairs(NYC.R[,2:5], main = "Scatterplot of Italian restaurants in the New York City area",
pch = 21, bg = c( "lightblue", "pink2")[unclass(NYC.R$Location)])
head(NYC.R)
summary(model.saturated) #Many predictor variables are not significant, yet the
model.saturated = lm(Life.Exp ~ ., data = states)
help(state.x77)
state.x77 #Investigating the state.x77 dataset.
states = as.data.frame(state.x77) #Forcing the state.x77 dataset to be a dataframe.
#Cleaning up the column names so that there are no spaces.
colnames(states)[4] = "Life.Exp"
colnames(states)[6] = "HS.Grad"
#Creating a population density variable.
states[,9] = (states$Population*1000)/states$Area
colnames(states)[9] = "Density"
#Basic numerical EDA for states dataset.
summary(states)
sapply(states, sd)
cor(states)
#Basic graphical EDA for the states dataset.
plot(states)
model.saturated = lm(Life.Exp ~ ., data = states)
summary(model.saturated) #Many predictor variables are not significant, yet the
plot(model.saturated) #Assessing the assumptions of the model.
library(car)
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
main="Scatterplot Matrix")
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
+                    main="Scatterplot Matrix")
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
+                    main="Scatterplot Matrix")
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
main="Scatterplot Matrix")
library(car)
scatterplotMatrix(~SleepDuration+Weight+Tempreture+Activity+HeartRate|DayType,data= mydata,
main="Scatterplot Matrix", labels = "a")
plot(mydata[,c(34,6,7,8)])
plot(mydata[,c(3,4,6,7,8)])
plot(mydata[,c(4,3,6,7,8)])
library(tidyverse)
mydata %>%
select(-DayofWeek)
library("googlesheets")
googlekey <- gs_url("https://docs.google.com/spreadsheets/d/1KdOw0FIxY2Kt8UgY16F3UMQSC7KJaBgtmewNZUGuLY8/edit#gid=0",lookup = FALSE,visibility = "public")
mydata <- gs_read(googlekey, skip = 3)
head(mydata)
library(tidyverse)
mydata %>%
mutate(DayType = ifelse(DayofWeek %in% c("Sat", "Sun"), "Weekend", "Weekday"))
library(tidyverse)
mydata %>%
mutate(DayType = ifelse(DayofWeek %in% c("Sat", "Sun"), "Weekend", "Weekday")) %>%
select(-DayofWeek)
library(tidyverse)
mydata <- mydata %>%
mutate(DayType = ifelse(DayofWeek %in% c("Sat", "Sun"), "Weekend", "Weekday")) %>%
select(-DayofWeek)
knitr::kable(mydata)
knitr::kable(heand(mydata),10)
knitr::kable(head(mydata),10)
knitr::kable(head(mydata, 10))
print(express(degree))
expression(degree)
print(expression(degree))
print(expression(degree, c))
sch <- c("Date", "Weight(kg)", "SleepDuration(hr)", "Weatehr", "Tempreture(c)", "Activity(Steps)",
"HeartRate(bpm)", "DayType")
knitr::kable(head(mydata, 10), col.names = sch)
library("googlesheets")
googlekey <- gs_url("https://docs.google.com/spreadsheets/d/1KdOw0FIxY2Kt8UgY16F3UMQSC7KJaBgtmewNZUGuLY8/edit#gid=0",lookup = FALSE,visibility = "public")
mydata <- gs_read(googlekey, skip = 3)
knitr::kable(head(mydata), format = "markdown", align = 'c')
library(tidyverse)
mydata <- mydata %>%
mutate(DayType = ifelse(DayofWeek %in% c("Sat", "Sun"), "Weekend", "Weekday")) %>%
select(-DayofWeek)
sch <- c("Date", "Weight(kg)", "SleepDuration(hr)", "Weatehr", "Tempreture(c)", "Activity(Steps)",
"HeartRate(bpm)", "DayType")
knitr::kable(head(mydata, 10), col.names = sch)
library(sha)
head(mydata)
model.saturated = lm(SleepDuration ~ . -Date , data= mydata)
ml.saturated = lm(SleepDuration ~ . -Date , data= mydata)
ml.saturated = lm(SleepDuration ~ . -Date , data= mydata)
ml.saturated = lm(SleepDuration ~ . -Date , data= mydata)
summary(ml.saturated)
ml.saturated = lm(SleepDuration ~ . -Date Weather , data= mydata)
str(mydata)
mydata$DayType <- as.factor(mydata$DayType)
mydata$DayType <- as.factor(mydata$DayType)
mydata$Weather <- as.factor(mydata$Weather)
mydata$DayType <- as.factor(mydata$DayType)
mydata$Weather <- as.factor(mydata$Weather)
str(mydata)
ml.saturated = lm(SleepDuration ~ Weight + Tempreture + Activity + HeartRate +  DayType,
data= mydata)
summary(ml.saturated)
ml.saturated = lm(SleepDuration ~ Weight + Tempreture + Activity + HeartRate +  DayType,
data= mydata)
summary(ml.saturated)
plot(ml.saturated)
ans <- mydata %>%
filter(Weather == "Sunny") %>%
group_by(DayType) %>%
summarise(r = cor(SleepDuration, Tempreture)) %>%
mutate(r = round(r, 2)) %>%
arrange(desc(r))
knitr::kable(ans, format = "markdown", align = "l")
library(car)
vif(ml.saturated)
library(car)
avPlots(model.saturated)
library(car)
avPlots(ml.saturated)
plot(mydata[,c(4,3,6,7,8)])
avPlots(model.saturated)
avPlots(model)
model <- lm(Price ~ . -Restaurant , data=NYC.R)
summary(model)
avPlots(model)
ml.d = lm(SleepDuration ~ Activity + HeartRate +  DayType,
data= mydata)
summary(ml.d)
plot(mydata)
plot(mydata[,c(4,3,6,7,8)])
plot(mydata %>% select(-Date))
plot(mydata %>% select(SleepDuration, Weight, Tempreture, Activity, HeartRate))
library(car)
influencePlot(model.saturated)
influencePlot(model)
library(car)
influencePlot(model.saturated)
vif(model.saturated)
library(car)
vif(model.saturated)
library(car)
vif(model.saturated)
vif(model.saturated)
vif(model)
library(car)
vif(ml.saturated)
library(car)
avPlots(ml.saturated)
model_log <- slm_log(mydata, "Activity", "SleepDuration")
summary(model_log)
slm_s(mydata, x = "Tempreture", y="HeartRate")
modelplot(mydata, x = "Tempreture", y="HeartRate")
model_log <- slm_log(mydata, "Activity", "SleepDuration")
log_modelplot(mydata, x = "Tempreture", y="HeartRate")
slm_log(sleepduration, "Tempreture", "HeartRate")
slm_log(sleepduration, "Tempreture", "SleepDuration")
model_log <- slm_log(mydata, "Activity", "SleepDuration")
model_log <- slm_log(mydata, "Activity", "SleepDuration")
slm_log(sleepduration, "Tempreture", "SleepDuration")
model_log <- slm_log (mydata, "Activity", "SleepDuration")
slm_log <- function(data, x, y){
model.t = lm(log(data[[y]]) ~ data[[x]])
return(summary(model.t))
}
model_log <- slm_log (mydata, "Activity", "SleepDuration")
devtools::load_all("~/Desktop/r_package_sha")
library(sha)
slm_log(mydata, "Tempreture", "SleepDuration")
slm_log(mydata, "Activity", "SleepDuration")
slm_log(mydata, "Activity", "SleepDuration")
devtools::load_all("~/Desktop/r_package_sha")
log_modelplot <- function(data,x,y){
model.t = lm(log(data[[y]]) ~ data[[x]])
plot(data[[x]],data[[y]],
xlab = x,
ylab = y,
main = paste(y,"association with", x))
abline(model, lty = 2, col = "red")
eq <- paste("Predicted", y, "=", round(coef(model)[1], 4), "+ (", round(coef(model)[2], 4), ") *", x )
mtext(eq, 3, line=-2, col = "Brown")
}
modelplot(mydata,"Activity", "SleepDuration")
modelplot(mydata,"Activity", "SleepDuration")
#'
log_modelplot <- function(data,x,y){
model.t = lm(log(data[[y]]) ~ data[[x]])
plot(data[[x]],data[[y]],
xlab = x,
ylab = y,
main = paste(y,"association with", x))
abline(model, lty = 2, col = "red")
eq <- paste("Predicted", y, "=", round(coef(model.t)[1], 4), "+ (", round(coef(model.t)[2], 4), ") *", x )
mtext(eq, 3, line=-2, col = "Brown")
}
log_modelplot(mydata,"Activity", "SleepDuration")
log_modelplot(sleepduration,"Tempreture", "SleepDuration")
devtools::load_all("~/Desktop/r_package_sha")
log_modelplot <- function(data,x,y){
model.t = lm(log(data[[y]]) ~ data[[x]])
plot(data[[x]],data[[y]],
xlab = x,
ylab = y,
main = paste(y,"association with", x))
abline(model.t, lty = 2, col = "red")
eq <- paste("Predicted", y, "=", round(coef(model.t)[1], 4), "+ (", round(coef(model.t)[2], 4), ") *", x )
mtext(eq, 3, line=-2, col = "Brown")
}
log_modelplot(mydata,"Activity", "SleepDuration")
log_modelplot(mydata,"Activity", "SleepDuration")
log_modelplot <- function(data,x,y){
model.t = lm(log(data[[y]]) ~ data[[x]])
plot(data[[x]],data[[y]],
xlab = x,
ylab = y,
main = paste(y,"association with", x))
abline(model.t, lty = 2, col = "red")
eq <- paste("Predicted", y, "=", round(coef(model.t)[1], 4), "+ (", round(coef(model.t)[2], 6), ") *", x )
mtext(eq, 3, line=-2, col = "Brown")
}
log_modelplot <- function(data,x,y){
model.t = lm(log(data[[y]]) ~ data[[x]])
plot(data[[x]],data[[y]],
xlab = x,
ylab = y,
main = paste(y,"association with", x))
abline(model.t, lty = 2, col = "blue")
eq <- paste("Predicted", y, "=", round(coef(model.t)[1], 4), "+ (", round(coef(model.t)[2], 6), ") *", x )
mtext(eq, 3, line=-2, col = "Brown")
}
log_modelplot(mydata,"Activity", "SleepDuration")
log_modelplot(mydata,"Weight", "SleepDuration")
log_modelplot(mydata,"Tempreture", "SleepDuration")
log_modelplot <- function(data,x,y){
model.t = lm(log(data[[y]]) ~ data[[x]])
plot(data[[x]],data[[y]],
xlab = x,
ylab = y,
main = paste(y,"association with", x))
abline(model.t, lty = 2, col = "blue")
eq <- paste("Predicted", y, "=", round(coef(model.t)[1], 4), "+ (", round(coef(model.t)[2], 6), ") *", x )
mtext(eq, 3, line=-2, col = "Brown")
}
log_modelplot(mydata,"Tempreture", "SleepDuration")
log_modelplot <- function(data,x,y){
model.t = lm(log(data[[y]]) ~ data[[x]])
plot(data[[x]],data[[y]],
xlab = x,
ylab = y,
main = paste(y,"association with", x))
abline(model.t, lty = 2, col = "blue")
eq <- paste("Predicted log ", y, "=", round(coef(model.t)[1], 4), "+ (", round(coef(model.t)[2], 6), ") *", x )
mtext(eq, 3, line=-2, col = "Brown")
}
modelplot(mydata,"Tempreture", "SleepDuration")
log_modelplot(mydata,"Tempreture", "SleepDuration")
log_modelplot <- function(data,x,y){
model.t = lm(log(data[[y]]) ~ data[[x]])
plot(data[[x]], log(data[[y]]),
xlab = x,
ylab = y,
main = paste(y,"association with", x))
abline(model.t, lty = 2, col = "blue")
eq <- paste("Predicted log", y, "=", round(coef(model.t)[1], 4), "+ (", round(coef(model.t)[2], 6), ") *", x )
mtext(eq, 3, line=-2, col = "Brown")
}
log_modelplot(mydata,"Tempreture", "SleepDuration")
log_modelplot <- function(data,x,y){
model.t = lm(log(data[[y]]) ~ data[[x]])
plot(data[[x]], log(data[[y]]),
xlab = x,
ylab = paste("log", y),
main = paste(y,"association with", x))
abline(model.t, lty = 2, col = "blue")
eq <- paste("Predicted log", y, "=", round(coef(model.t)[1], 4), "+ (", round(coef(model.t)[2], 6), ") *", x )
mtext(eq, 3, line=-2, col = "Brown")
}
log_modelplot(mydata,"Tempreture", "SleepDuration")
ml.saturated = lm(log(SleepDuration) ~ Weight + Tempreture + Activity + HeartRate +  DayType,
data= mydata)
summary(ml.saturated)
ml.saturated = lm(SleepDuration ~ Weight + Tempreture + Activity + HeartRate +  DayType,
data= mydata)
summary(ml.saturated)
log_modelplot(mydata,"Tempreture", "SleepDuration")
plot(slm_s)
slm_s(mydata, x = "Tempreture", y="HeartRate")
modelplot(mydata, x = "Tempreture", y="HeartRate")
qqnorm(slm_s$residuals)
slm_s
slm_model <- slm_s(mydata, x = "Tempreture", y="HeartRate")
modelplot(mydata, x = "Tempreture", y="HeartRate")
slm_model <- slm_s(mydata, x = "Tempreture", y="HeartRate")
slm_model
modelplot(mydata, x = "Tempreture", y="HeartRate")
qqnorm(slm_mode$residuals)
qqnorm(slm_model$residuals)
qqline(slm_model$residuals)
plot(slm_model)
data(cats)
library(MASS)
cats
model = lm(Hwt ~ Bwt, data = cats)
summary(model)
confint(model)
plot(model)
qqnorm(slm_model$residuals)
qqline(slm_model$residuals)
qqnorm(slm_model$residuals)
qqline(slm_model$residuals)
log_slm <- slm_log(mydata,"Tempreture", "SleepDuration"))
log_slm <- slm_log(mydata,"Tempreture", "SleepDuration")
qqnorm(slm_model$residuals)
qqline(slm_model$residuals)
log_slm <- slm_log(mydata,"HeartRate", "Tempreture")
qqnorm(slm_model$residuals)
qqline(slm_model$residuals)
log_slm <- slm_log(mydata,"HeartRate", "Tempreture")
qqnorm(log_slm$residuals)
qqline(log_slm$residuals)
log_slm <- slm_log(mydata,"Activity", "SleepDuration")
qqnorm(log_slm$residuals)
qqline(log_slm$residuals)
log_slm <- slm_log(mydata,"Activity", "Weight")
qqnorm(log_slm$residuals)
qqline(log_slm$residuals)
knitr::kable(paircorr(mydata), format = "markdown", align = "l", padding = 2 )
slm_model <- slm_s(mydata, x = "Activity", y="Weight")
slm_model
modelplot(mydata, x = "Tempreture", y="HeartRate")
slm_model <- slm_s(mydata, x = "Activity", y="Weight")
slm_model
modelplot(mydata, x = "Activity", y="Weight")
slm_model <- slm_s(mydata, x = "Tempreture", y="HeartRate")
slm_model
modelplot(mydata, x = "Tempreture", y="HeartRate")
log_slm <- slm_log(mydata,"Tempreture", "HeartRate")
qqnorm(log_slm$residuals)
qqline(log_slm$residuals)
library(sha)
